#include "TDA_ProcesoEntrada.h"

void displayVersion() {

	outputMsg(
		"\n66:20 - Organizacion del Computador\n"
		"     2do Cuatrimestre del 2009\n"
		"Version 1.0 Comando Cut realizada por :\n"
		"	Hernan  Rivero\n"
		"	Nicolas Fernandez\n"
		"	Martin  Medina\n"
		"\n ");
}

void displayHelp() {

	outputMsg(
	"\nSistema de Ayuda\n "
	"--------------------\n"
	" Comando             Tarea \n"
	" -V, --version       Imprime la version del comando y finaliza.\n"
	" -h, --help          Imprime la informacion que se muestra y finaliza.\n");
	outputMsg(" -d, --delimiter     Se utiliza el 1er caracter de la cadena especificada como separador de campos\n"
	" -b, --bytes  LIST   Especifica la posicion de los bytes a ser extraidos\n"
	" -f, --field  LIST   Especifica la posicion de los campos a ser extraidos\n"
	" -s, --ignore        Ignora las lineas que no tengan delimitadores\n");
	outputMsg("\nEjemplos de uso:\n"
	"-------------------\n"
	"ie1: $echo abc.def.ghi | tp0 -f 1,3 -d. Muestra: abc.ghi\n"
	"ie2: tp0 -d. -f 1-3\n"
	"ie3: tp0 -b 2-4,5,8,10\n\n");
}

void procesarLinea (int cantCampos, int longLinea, char* linea, char delimitador, int rginf, int rgsup, int rangos[MAXRANGES][2], int cantRangos){

	char ** campos;
	int posCampos, posRangos;

	llenarMatrizDatos(&campos, cantCampos, longLinea, linea, delimitador);
	if (rginf != -1){
		if (rginf >= cantCampos){
			outputMsg (linea);
		}
		else{
			outputMsg(campos[0]);
			for (posCampos=1;  posCampos < rginf; posCampos++){
				outputChar(delimitador);
				outputMsg(campos[posCampos]);
			}
		}
	}
	/*No tengo el tamanio del vector de rangos!!!!*/

	if (cantRangos > 0 && rangos[0][0] <= cantCampos){
		if (rginf == -1){
			outputMsg (campos[rangos[0][0]-1]);
		}
		else{
			outputChar(delimitador);
			outputMsg(campos[rangos[0][0]-1]);
		}
		if (rangos[0][1] < cantCampos){
			for (posCampos = rangos[0][0]; posCampos < rangos[0][1]; posCampos++){
				outputChar(delimitador);
				outputMsg(campos[posCampos]);
			}
		}
		else{
			for (posCampos = rangos[0][0]; posCampos < cantCampos; posCampos++){
				outputChar(delimitador);
				outputMsg(campos[posCampos]);
			}
		}
	}
	posRangos = 1;
	/*No tengo el tamanio del vector de rangos!!!!*/
	while (posRangos < cantRangos && rangos[posRangos][0] <= cantCampos){
		if (rangos[posRangos][1] < cantCampos){
			for (posCampos = rangos[posRangos][0]-1; posCampos < rangos[posRangos][1]; posCampos++){
				outputChar(delimitador);
				outputMsg(campos[posCampos]);
			}
		}
		else{
			for (posCampos = rangos[posRangos][0]-1; posCampos < cantCampos; posCampos++){
				outputChar(delimitador);
				outputMsg(campos[posCampos]);
			}
		}
		posRangos++;
	}
	if (rgsup != INT_MAX && rgsup <= cantCampos){
		if (rginf == -1 && cantRangos > 0){
			outputMsg(campos[rgsup-1]);
		}
		else{
			outputChar(delimitador);
			outputMsg(campos[rgsup-1]);
		}
		for (posCampos = rgsup; posCampos < cantCampos; posCampos++){
			outputChar(delimitador);
			outputMsg(campos[posCampos]);
		}
	}
	outputChar('\n');
	liberarMemoria(&campos,cantCampos);
}

void procesarArchivoCampos (FILE* archivo, char delimitador, int rginf, int rgsup, int rangos[MAXRANGES][2], int cantRangos, short int ignorar){

	char linea [MAXLONGLINE];
	int cantCampos, longLinea;

	memset(linea, '\0', MAXLONGLINE);
	printf("\n\nEntre a procesarArchivosCampos\n");
	if (ignorar){
		while (fgets (linea, MAXLONGLINE, archivo)) {
			longLinea = strlen(linea);
			if ( linea[longLinea - 1] == '\n' ) {
				linea[( longLinea - 1 )] = '\0'; /* Con esto remuevo el end of line que queda demas */
				longLinea--;
			}
			printf ("strlen(linea) da: %d\n", strlen(linea));
			printf ("lnlength da: %d\n", longLinea);
			printf ("el contenido de \"linea\" es: %s\n", linea);
			cantCampos = contarTokens(delimitador, linea);
			printf ("cant campos: %d\n", cantCampos);
			if (cantCampos > 1){
				procesarLinea (cantCampos, longLinea, linea, delimitador, rginf, rgsup, rangos, cantRangos);
			}
		}
	}
	else{
		while (fgets (linea, MAXLONGLINE, archivo)) {
			longLinea = strlen(linea);
			if ( linea[longLinea - 1] == '\n' ) {
				linea[( strlen(linea) - 1 )] = '\0';
				longLinea--;
			}
			cantCampos = contarTokens(delimitador, linea);
			if (cantCampos > 1){
				procesarLinea (cantCampos, longLinea, linea, delimitador, rginf, rgsup, rangos, cantRangos);
			}
			else{
				outputMsg (linea);
				outputChar ('\n');
			}
		}
	}
}

void obtenerCampos (char *(parametros[MAXARCHIVOS]), int cantArchivos, char delimitador, int rginf, int rgsup, int rangos[MAXRANGES][2], int cantRangos , short int ignorar){

	int i;
	FILE* archivo;

	printf ("(Estoy en obtener campos) cantArchivos: %d\n", cantArchivos);
	if (cantArchivos == 0) {
		procesarArchivoCampos (stdin, delimitador, rginf, rgsup, rangos, cantRangos, ignorar);
	}
	else{
		for (i=0; i<cantArchivos ;i++) {
			archivo = fopen(parametros[i],"r");

			if (archivo){
				procesarArchivoCampos (archivo, delimitador, rginf, rgsup, rangos, cantRangos, ignorar);
				outputMsg ("Antes de cerrar el archivo y luego de procesar\n");
				fclose (archivo);
				outputMsg ("Archivo cerrado\n");
			}
			else{
				outputError ("No puede abrirse el archivo ");
				outputError (parametros[i]);
				outputError ("\n");
			}

		}
	}
}

void procesarArchivoBytes (FILE* archivo, int rginf, int rgsup, int rangos[MAXRANGES][2], int cantRangos){

	char linea [MAXLONGLINE];
	int posRangos, posLinea, longLinea;

	memset(linea, '\0', MAXLONGLINE);
	while (fgets (linea, MAXLONGLINE, archivo)) {
		longLinea = strlen(linea);
		if ( linea[longLinea - 1] == '\n' ) {
			longLinea--;
		}
	}

	if (rginf != -1){
		if (rginf >= longLinea){
			outputMsg(linea);
		}
		else{
			for (posLinea=0; posLinea < rginf; posLinea++){
				outputChar(linea[posLinea]);
			}
		}
	}

	posRangos = 0;
	/*No tengo el tamanio del vector de rangos!!!!*/
	while (posRangos < cantRangos && rangos[posRangos][0] <= longLinea){
		if (rangos[posRangos][1] < longLinea){
			for (posLinea = rangos[posRangos][0]-1; posLinea < rangos[posRangos][1]; posLinea++){
				outputChar(linea[posLinea]);
			}
		}
		else{
			for (posLinea = rangos[posRangos][0]-1; posLinea < longLinea; posLinea++){
				outputChar(linea[posLinea]);
			}
		}
		posRangos++;
	}

	if (rgsup != INT_MAX && rgsup <= longLinea){
		for (posLinea = rgsup-1; posLinea < longLinea; posLinea++){
				outputChar(linea[posLinea]);
		}
	}
	outputChar('\n');
}

void obtenerBytes (char *(parametros[MAXARCHIVOS]), int cantArchivos, int rginf, int rgsup, int rangos[MAXRANGES][2], int cantRangos){

	int i;
	FILE* archivo;

	if (cantArchivos == 0) {
		procesarArchivoBytes (stdin,  rginf, rgsup, rangos, cantRangos);
	}
	else{
		for (i=0; i<cantArchivos ;i++) {
			archivo = fopen(parametros[i],"r");

			if (archivo){
				procesarArchivoBytes(archivo, rginf, rgsup, rangos, cantRangos);
				fclose (archivo);
			}
			else{
				outputError ("No puede abrirse el archivo ");
				outputError (parametros[i]);
				outputError ("\n");
			}

		}
	}
}
