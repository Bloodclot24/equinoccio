#ifndef RED_H_INCLUDED
#define	RED_H_INCLUDED

#include <iostream>
#include <fstream>
#include "lista.h"
#include "servidor.h"
#include "router.h"

class Red{
private:
     Lista<NodoDeRed*>* nodos;
     std::ifstream entrada;
     int cantidadDeNodos;
     int cantidadDeServers;
     int contadorDijkstra;
     int dijkstraPrimeraVez;
     
public:
     /* 
      * Crea una nueva red y le asigna un archivo de entrada
      */
     Red(const char *nombreArchivo);

     ~Red();

     /*
      * Corre la simulacion.
      */
     void simular(void);


private:
     /*
      * Busca un nodo en la red segun su direccion.
      * Devuelve el nodo si lo encuentra o NULL si no.
      */
     NodoDeRed* buscarNodo(int direccion);

     /*
      * Crea un nuevo nodo y lo agrega a la lista.
      * Aumenta en uno el contador de nodos.Puede incrementar o no el contador de servidores
      * dependiendo del tipo de nodo a construir.
      */
     void nuevoNodo(void);

     /*
      * Crea una relacion entre dos nodos de la red.
      */
     void nuevaArista(void);

     /*
      * Hace que el servidor indicado cree un mensaje dado, con un cierto
      * destino.
      */
     void nuevoMensaje(void);

     /*
      * Pone en 'c' el proximo caracter del archivo de entrada.
      */
     void obtenerParametro(char &c);

     /*
      * Pone en 'i'el valor del paramatro codificado en ASCII.
      * Como en este caso la longitud del campo no es siempre fija, terminamos de leer
      * cuando encontramos ',', '\n' o ' '.
      */
     void obtenerParametro(int &i);
     
     /*
      * Recorre cada nodo de la red y le permite procesar un turno.
      */
     void ronda(void);


     /*
      * Corre el algoritmo de Dijkstra en todos los nodos de la red, 
      * creando o actualizando las tablas de ruteo.
      */
     void Dijkstra(void);

     /*
      * Para una direccion destino dada, ajusta las tablas de ruteo de los
      * nodos de la red según el vector 'decision'.
      */
     void ajustarTablas(int direccion, int* decision);

     /*
      * Dado un vector de booleanos, indica si ya estan marcados
      * todos como verdaderos. Asume que el tamaño del vector es
      * igual a la cantidad de nodos en la red.
      */
     bool todosVistos(bool *visto);

     /*
      * Devuelve el indice del elemento del vector de distancias de menor valor
      * que a su vez este marcado como 'false' en el vector 'visto'.
      * Asume que las longitudes delos vectores son iguales, y contienen
      * tantos elementos como nodos en la red.
      * En caso de que dos o mas elementos cumplan con el requisito, se
      * devuelve el indice mas bajo.
      */
     int minimaDistancia(unsigned int *distancias, bool *visto);

     /*
      * Dado un nodo y un vector de distancias, actualiza el vector de distancias
      * segun el algoritmo de Dijkstra.
      * Asume que el vector de distancias tiene tantos elementos como nodos de la red.
      */
     void ajustarDistanciasMinimas(NodoDeRed* nodo, unsigned int *distancia, int *decision);

     /*
      * Parsea una linea del archivo.
      * Si todo sale bien devuelve TRUE, si algo falla devuelve FALSE.
      * Como sabemos que el archivo siempre biene bien formado
      * el parseo se simplifica y no se contemplan los casos de error.
      * La funcion extrae el primer caracter del archivo de entrada y
      * llama a la funcion pertinente segun su valor. Por lo tanto, el 
      * proximo caracter de la entrada es ',' si se requieren parametros
      * o '\n' si no se esperan parametros. Cada funcion se hace cargo de 
      * tomar los datos que necesita de la entrada.
      */
     bool parsear(void);

};

#endif // RED_H_INCLUDED
