#ifndef TILESET_H_INCLUDED
#define TILESET_H_INCLUDED

#include "SDL.h"
#include "SDL_image.h"
#include <libxml/parser.h>
#include <libxml/tree.h>


#define TILE_WIDTH_DEFAULT 32
#define TILE_HEIGTH_DEFAULT 32

#define TILESET_ROOT_NAME "TileSet"
#define TILESET_FILE_NAME "fileName"
#define TILESET_TILE_NAME "Tile"


class TileSet{
private:
     SDL_Surface* set;		/**< El set (la imagen con los
				 * tiles)*/
     SDL_Rect* bound;		/**< Las posiciones y limites de cada
				 * tile */
     uint32_t numTiles;		/**< La cantidad total de tiles en el
				 * set */

     TileSet(const TileSet& set){}
     TileSet operator=(const TileSet& set){return set; }

     /** 
      * Funcion utilizada para contar la cantidad de tiles en un set
      * xml.
      * 
      * @param nodo El primer nodo del archivo xml que define un tile.
      * 
      * @return Devuelve 0 si tuvo exito.
      */
     int LoadXML_Helper(xmlNode* nodo);

public:
     /** 
      * Crea un nuevo TileSet. Inicializa el estado.
      */
     TileSet();

     /** 
      * Carga una imagen para utilizar como set. Crea los tiles como
      * TILESET_WIDTH_DEFAULTxTILESET_HEIGTH_DEFAULT. 
      * 
      * @param fileName El nombre del archivo de tiles (una imagen).
      * 
      * @return Devuelve 0 si tuvo exito.
      */
     int Load(const char *fileName);
     
     /** 
      * Carga un set a partir de un xml. Dentro del xml se especifica
      * la ubicacion de cada tile.
      * 
      * @param filename El nombre del xml
      * 
      * @return Devuelve 0 di tuvo exito.
      */
     int LoadXML(const char* filename);

     /** 
      * Dibuja en dst el tile especificado.
      * 
      * @param tileNumber El numero de tile.
      * @param dst La superficie destino.
      * @param dstRect Posicion destino en la superficie + clipping.
      * 
      * @return Devuelve 0 si tuvo exito.
      */
     int Draw(int tileNumber, SDL_Surface* dst, SDL_Rect* dstRect);
     
     /** 
      * Devuelve la cantidad totales de tiles que conforman el set.
      * 
      * @return La cantidad de tiles disponibles.
      */
     uint32_t GetNumTiles();

     /** 
      * Devuelve un puntero a la superficie que contiene los tiles.
      * 
      * @return Un puntero a la superficie.
      */
     SDL_Surface* GetSurface();

     /** 
      * Obtiene las coordenadas del tile dentro de la superficie.
      * 
      * @param tileNumber El numero de tile.
      * 
      * @return Un SDL_Rect conteniendo las coordenadas del tile asi
      * como su ancho y alto.
      */
     SDL_Rect GetRegion(uint32_t tileNumber);

     /** 
      * Asigna las coordenadas de un tile dentro de la superficie.
      * No se realiza ninguna validacion del area especificada.
      * 
      * @param tileNumber El numero de tile.
      * @param rect La nueva region.
      */
     void SetRegion(uint32_t tileNumber, SDL_Rect rect);

     /** 
      * Libera el set.
      */
     ~TileSet();
};

#endif //TILESET_H_INCLUDED
