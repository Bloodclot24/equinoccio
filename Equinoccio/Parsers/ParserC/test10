/* Funcion que optimiza al maximo y facilita el proceso de los rangos y posiciones, eliminando los solapados */
int PrepararVectorRangos(int rangos[MAXRANGES][2], int size, int rginf, int rgsup) {

	int newcant = 0, i = 0;

	printf("\n Antes de ordenar!\n\n");
	dsort(rangos, size, 1);
	asort(rangos, size, 0);
	printf("\ndespues de ordenar!\n\n");
	for (i=0; i<size; i++)  fprintf(stdout, "Rango numero %d: %d - %d\n", i, rangos[i][0], rangos[i][1]);

	i = 0;
	while ( (i < size) && (rangos[i][1] < rginf) )  i++;
	if (i < size) {
		if (rangos[i][0] < rginf)  rangos[newcant][0] = rginf + 1;
		else  rangos[newcant][0] = rangos[i][0];
		rangos[newcant++][1] = rangos[i++][1];
	}
	while ( (i < size) && (rangos[i][0] < rgsup) ) {
		if ( rangos[i][1] > rangos[newcant - 1][1] ) {
			if ( rangos[i][0] <= rangos[newcant - 1][1] )  rangos[newcant][0] = rangos[newcant - 1][1] + 1;
			else  rangos[newcant][0] = rangos[i][0];
			rangos[newcant++][1] = rangos[i][1];
		}
		i++;
	}
	if (rangos[newcant - 1][1] >= rgsup)  rangos[newcant - 1][1] = rgsup - 1;
	return newcant;
}
