#include <iostream>
#include "Sprite.h"
#include <tinyxml/tinyxml.h>

Sprite::Sprite(int width, int height) {
    this->width = width;
    this->height = height;
    currentFrame = 0;
    toNextFrame = 0;
    partName = new std::string("");
    surface = SDL_CreateRGBSurface(SDL_SWSURFACE, width, height, 16, 0, 0, 0, 0);
}

Sprite::Sprite(TiXmlNode *xmlNode) {
    load(xmlNode);
}

void Sprite::DefineBasePart(std::string partName) {
    this->partName->assign(partName);
}

void Sprite::addPoint(Point* point) {
    pointsVector.push_back(point);
}

Point* Sprite::addPoint(int x, int y) {
    Point *tempPoint = new Point(x,y);
    addPoint(tempPoint);
    return tempPoint;
}

void Sprite::addPointAndMap(Point* point, Sprite* sprite) {
    addPoint(point);
    mapSpriteToPoint(point, sprite);
}

void Sprite::addPointAndMap(int x, int y, Sprite* sprite) {
    Point* tempPoint = addPoint(x,y);
    mapSpriteToPoint(tempPoint, sprite);
}

void Sprite::removePoint(Point* point) {

}

void Sprite::declareCenterPoint(Point* centerPoint) {
    this->centerPoint = centerPoint;
}

void Sprite::declareCenterPoint(int x, int y) {
    this->centerPoint = new Point(x,y);
}

void Sprite::declarePart(std::string partName, SDL_Rect* positionInPartsSurface) {
    spriteParts.insert(std::pair<std::string, SDL_Rect*>(partName, positionInPartsSurface));
}

void Sprite::undeclarePart(std::string name) {
    spriteParts.erase(name);
}

void Sprite::mapSpriteToPoint(Point* point, Sprite* sprite) {
    spriteStructure.insert(std::pair<Point*, Sprite*>(point, sprite));
}

SDL_Surface* Sprite::draw() {

    SDL_FillRect(surface, NULL, SDL_MapRGB(surface->format, 255,255,255));
    std::map<Point*, Sprite*>::iterator structureIterator;

    SDL_Rect r;
    r.x = 0;
    r.y = 0;
    r.w = width;
    r.h = height;

    SDL_BlitSurface(partsSurface, spriteParts.find(partName->c_str())->second, surface, &r);

    structureIterator = spriteStructure.begin();

    while (structureIterator != spriteStructure.end()) {

        Point *temporalPoint = (*structureIterator).first;

        Sprite *temporalSprite = (*structureIterator).second;

        r.x = temporalPoint->getx()-temporalSprite->getCenterPoint()->getx();
        r.y = temporalPoint->gety()-temporalSprite->getCenterPoint()->gety();
        r.w = temporalSprite->getWidth();
        r.h = temporalSprite->getHeigth();

        SDL_BlitSurface(temporalSprite->draw(), 0, surface, &r);

        r.x = temporalPoint->getx();
        r.y = temporalPoint->gety();
        r.w = 2;
        r.h = 2;

        SDL_FillRect(surface, &r, SDL_MapRGB(surface->format, 255, 0, 0));

        structureIterator++;
    }

    //if(this->currentAngle == 0)
    return surface;

    //return rotozoomSurface(surface, currentAngle, 1, 0);
}

int Sprite::addFrame(Frame* frame) {
    framesVector.push_back(frame);
    return framesVector.size();
}

int Sprite::nextFrame() {
    toNextFrame = framesVector.at(currentFrame)->getDuration();
    framesVector.at(currentFrame)->execute();

    if (currentFrame < framesVector.size()-1)
        ++currentFrame;
    else currentFrame = 0;

    return currentFrame;
}

void Sprite::giveTime(int deltaT) {
    int resto = deltaT;

    resto = toNextFrame-resto;

    if (resto>0)
        toNextFrame = resto;
    else if (resto<0) {
        nextFrame();
        giveTime(resto);
    } else nextFrame();
}

Sprite::~Sprite() {
    SDL_FreeSurface(surface);
    SDL_FreeSurface(partsSurface);
    delete partName;
}

void Sprite::load(TiXmlNode *xmlNode) {

    TiXmlHandle handle(xmlNode);
    TiXmlElement* element;

    bool isRoot = false;

    element = handle.ToElement();

    width = strtol(element->Attribute("width"), NULL, 10);
    height = strtol(element->Attribute("height"), NULL, 10);
    partName = new std::string(element->Attribute("partName"));

    surface = SDL_CreateRGBSurface(SDL_SWSURFACE, width, height, 16, 0, 0, 0, 0);
    currentFrame = 0;
    toNextFrame = 0;

    if (!strcmp(element->Attribute("root") ,"true"))
        isRoot = true;


    std::cout << "width: " << width << std::endl;
    std::cout << "height: " <<  height << std::endl;
    std::cout << "name: " << *partName << std::endl;
    std::cout << "root: " <<  isRoot << std::endl;

    element = handle.FirstChild("centerPoint").Element();

    declareCenterPoint(strtol(element->Attribute("x"), NULL, 10), strtol(element->Attribute("y"), NULL, 10));

    std::cout << "x: " << centerPoint->getx() << std::endl;
    std::cout << "y: " << centerPoint->gety() << std::endl;
    std::cout << "name: " << element->Attribute("pointName") << std::endl;  //TODO: pointName not used yet

    element = handle.FirstChild("boundingBox").Element();

    boundingBox = new SDL_Rect;
    boundingBox->x = strtol(element->Attribute("x"), NULL, 10);
    boundingBox->y = strtol(element->Attribute("y"), NULL, 10);
    boundingBox->w = strtol(element->Attribute("w"), NULL, 10);
    boundingBox->h = strtol(element->Attribute("h"), NULL, 10);

    std::cout << "x: " << boundingBox->x << std::endl;
    std::cout << "y: " << boundingBox->y << std::endl;
    std::cout << "w: " << boundingBox->w << std::endl;
    std::cout << "h: " << boundingBox->h << std::endl;

    if (isRoot) {
        element = handle.FirstChild("spriteParts").Element();
        std::cout << "  file: " << element->Attribute("file") << std::endl;

        loadSpriteSheet(element->Attribute("file"));


        element = element->FirstChildElement("string");

        for (element;element;element = element->NextSiblingElement("string")) {

            std::string *name = new std::string (element->Attribute("value"));

            std::cout << "      partName: " << *name << std::endl;
            element = element->NextSiblingElement("SDL_Rect");

            SDL_Rect *boundingBox = new SDL_Rect;
            boundingBox->x = strtol(element->Attribute("x"), NULL, 10);
            boundingBox->y = strtol(element->Attribute("y"), NULL, 10);
            boundingBox->w = strtol(element->Attribute("w"), NULL, 10);
            boundingBox->h = strtol(element->Attribute("h"), NULL, 10);

            std::cout << "      x: " << boundingBox->x << std::endl;
            std::cout << "      y: " << boundingBox->y << std::endl;
            std::cout << "      w: " << boundingBox->w << std::endl;
            std::cout << "      h: " << boundingBox->h << std::endl;

            declarePart(*name, boundingBox);

        }
    }


    element = handle.FirstChild("spriteStructure").Element();

    if (element != NULL) { // Leaf Sprite. Doesn't have childs.


        element = element->FirstChildElement("Point");

        for (element;element;element = element->NextSiblingElement("Point")) {

            Point *point = new Point(strtol(element->Attribute("x"), NULL, 10), strtol(element->Attribute("y"), NULL, 10));
            std::string *name = new std::string (element->Attribute("pointName"));

            std::cout << "  x: " << point->getx() << std::endl;
            std::cout << "  y: " << point->gety() << std::endl;
            std::cout << "  pointName: " << *name << std::endl;

            element = element->NextSiblingElement("Sprite");

            Sprite *childSprite = new Sprite(element->Clone());

            addPointAndMap(point, childSprite);
        }
    }


    element = handle.FirstChild("frameSet").Element();

    if (element != NULL) { // May not have frames.

        element = element->FirstChildElement("frame");

        for (element;element;element = element->NextSiblingElement("frame")) {

            int duration = strtol(element->Attribute("duration"), NULL, 10);

            TiXmlNode *childNode = element->FirstChild();

            FrameEvent *event = FrameEvent::load(childNode);

        }

    }

}

void Sprite::load(std::string fileName) {
    TiXmlDocument xmlFile(fileName.c_str());

    if (! xmlFile.LoadFile() )
        throw new std::string("File doesn't exist.\n");

    load(xmlFile.FirstChildElement("Sprite"));


}

void Sprite::rotate(double degrees) {
    currentAngle += degrees;
}

Point* Sprite::getCenterPoint() {
    return centerPoint;
}

int Sprite::getWidth() {
    return width;
}

int Sprite::getHeigth() {
    return height;
}

void Sprite::loadSpriteSheet(std::string fileName) {
    partsSurface = SDL_LoadBMP(fileName.c_str());
}
