#ifdef __cplusplus
#include <cstdlib>
#include <iostream>
#else
#include <stdlib.h>
#endif
#ifdef __APPLE__
#include <SDL/SDL.h>
#else
#include <SDL.h>
#endif

//#include "SDL_opengl.h"
#include "SDL_rotozoom.h"
#include "Sprite.h"
#include "Frame.h"
#include "FrameEvent.h"
#include "FrameEventMovePoint.h"

using namespace std;

int main ( int argc, char** argv ) {
    // initialize SDL video
    if ( SDL_Init( SDL_INIT_VIDEO ) < 0 ) {
        printf( "Unable to init SDL: %s\n", SDL_GetError() );
        return 1;
    }

    // make sure SDL cleans up before exit
    atexit(SDL_Quit);

    // create a new window
    SDL_Surface* screen = SDL_SetVideoMode(640, 480, 16,
                                           SDL_HWSURFACE|SDL_DOUBLEBUF);

    if ( !screen ) {
        printf("Unable to set 640x480 video: %s\n", SDL_GetError());
        return 1;
    }

    // load an image
    SDL_Surface* bmp = SDL_LoadBMP("cb.bmp");

    if (!bmp) {
        printf("Unable to load bitmap: %s\n", SDL_GetError());
        return 1;
    }

    // centre the bitmap on screen
    SDL_Rect dstrect;

    dstrect.x = (screen->w - bmp->w) / 2;

    dstrect.y = (screen->h - bmp->h) / 2;

    // program main loop
    bool done = false;
    Sprite test1(0,0);
    test1.load("spr1.xml");
/*
    Sprite alsa(90,90), oslo(30,30);

    Point *tempPoint = new Point(10,10);

    alsa.addPointAndMap(tempPoint, &oslo);
    alsa.DefineBasePart("tst1");
    oslo.DefineBasePart("tst1");

    oslo.declareCenterPoint(20,20);

    SDL_Surface *nuevo = rotozoomSurface(bmp, 45, 0.2, 1);

    alsa.declarePart("tst1", bmp);

    oslo.declarePart("tst1", nuevo);

    Frame myFrame(100);

    myFrame.addEvent(new FrameEventMovePoint(tempPoint, 2,0));

    alsa.addFrame(&myFrame);

    Frame myFrame2(50);

    myFrame2.addEvent(new FrameEventMovePoint(tempPoint, 2,0));

    alsa.addFrame(&myFrame2);

    Frame myFrame3(30);

    myFrame3.addEvent(new FrameEventMovePoint(tempPoint, -2,0));

    alsa.addFrame(&myFrame3);

    Frame myFrame4(70);

    myFrame4.addEvent(new FrameEventMovePoint(tempPoint, -2,0));

    alsa.addFrame(&myFrame4);


    SDL_Surface *spr;

*/
    while (!done) {
        // message processing loop
        SDL_Event event;

        while (SDL_PollEvent(&event)) {
            // check for messages
            switch (event.type) {
                    // exit if the window is closed

                case SDL_QUIT:
                    done = true;
                    break;
                    // check for keypresses

                case SDL_KEYDOWN: {
                        // exit if ESCAPE is pressed
                        if (event.key.keysym.sym == SDLK_ESCAPE)
                            done = true;

                        break;
                    }
            } // end switch
        } // end of message processing

        // DRAWING STARTS HERE

        // clear screen
        SDL_FillRect(screen, 0, SDL_MapRGB(screen->format, 0, 0, 0));

        // draw bitmap
        SDL_BlitSurface(bmp, 0, screen, &dstrect);

  //      spr = alsa.draw();

    //    alsa.giveTime(1);

      //  SDL_BlitSurface(spr,0,screen, NULL);

        // DRAWING ENDS HERE

        // finally, update the screen :)
        SDL_Flip(screen);
    } // end main loop

    // free loaded bitmap
    SDL_FreeSurface(bmp);


    // all is well ;)
    printf("Exited cleanly\n");

    return 0;
}

