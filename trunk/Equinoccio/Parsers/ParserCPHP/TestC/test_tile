#include "tile.h"

TileSet::TileSet(){
     set = NULL;
     bound = NULL;
     
}

int TileSet::Load(const char *fileName){
     set = IMG_Load(fileName);
     if(set == NULL)
	  return -1;
     int width,heigth;
     
     width = set->w / TILE_WIDTH_DEFAULT;
     heigth = set->h / TILE_HEIGTH_DEFAULT;
     
     numTiles = width*heigth;

     bound = new SDL_Rect[numTiles];

     for(int j=0;j<heigth;j++){
	  for(int i=0;i<width;i++){
	       bound[j*width+i].x=i*TILE_WIDTH_DEFAULT;
	       bound[j*width+i].y=j*TILE_HEIGTH_DEFAULT;
	       bound[j*width+i].w = TILE_WIDTH_DEFAULT;
	       bound[j*width+i].h = TILE_HEIGTH_DEFAULT;
	  }
     }
     return 0;
}

int TileSet::LoadXML_Helper(xmlNode* nodo){
     xmlNode *cur_node = NULL;
     
     numTiles=0;
     //Primero cuento cuantos Tiles hay definidos
     for (cur_node = nodo; cur_node; cur_node = cur_node->next)
	  if(strcmp(TILESET_TILE_NAME, (const char*)cur_node->name)==0)
	       numTiles++;

     bound = new SDL_Rect[numTiles];
     printf("Cantidad de tiles: %i.\n", numTiles);

     return 0;
}

int TileSet::LoadXML(const char* filename){
     xmlDoc *doc = NULL;
     xmlNode *root_element = NULL;
     LIBXML_TEST_VERSION;
     
     /*parse the file and get the DOM */
     doc = xmlReadFile(filename, NULL, 0);

     if(doc == NULL){
	  //No se pudo abrir el archivoo no existe.
	  return -1;
     }

     /*Get the root element node */
     root_element = xmlDocGetRootElement(doc);

     if(strcmp((const char*)root_element->name, TILESET_ROOT_NAME)==0){
	  xmlAttr *attr=NULL;
	  for(attr=root_element->properties;attr != NULL; attr=attr->next){
	       set = IMG_Load((const char*)xmlGetProp(root_element, (const xmlChar*)TILESET_FILE_NAME));
	  }
     }

     root_element = root_element->children;

     LoadXML_Helper(root_element);

     //Ahora los parseo
     xmlNode *cur_node = NULL;
     uint32_t i=0;
     for (cur_node = root_element; cur_node; cur_node = cur_node->next) {
	  if(strcmp(TILESET_TILE_NAME, (const char*)cur_node->name)==0){
	       printf("node type: Element, name: %s\n", cur_node->name);
	       //Se define cada Tile
	       xmlChar* aux = xmlGetProp(cur_node, (const xmlChar*)"x");
	       if(aux != NULL){
		    bound[i].x=atoi((const char*)aux);
	       }
	       aux = xmlGetProp(cur_node, (const xmlChar*)"y");
	       if(aux != NULL){
		    bound[i].y=atoi((const char*)aux);
	       }
	       aux = xmlGetProp(cur_node, (const xmlChar*)"w");
	       if(aux != NULL){
		    bound[i].w=atoi((const char*)aux);
	       }
	       aux = xmlGetProp(cur_node, (const xmlChar*)"h");
	       if(aux != NULL){
		    bound[i].h=atoi((const char*)aux);
	       }
	       printf("i:%i x:%i y:%i w:%i h:%i \n",i,bound[i].x,bound[i].y,bound[i].w,bound[i].h);
	       i++;

	  }
	  
     }


     /*free the document */
     //xmlFreeDoc(doc);

     /*
      *Free the global variables that may
      *have been allocated by the parser.
      */
     xmlCleanupParser();
     
     return 0;
}

uint32_t TileSet::GetNumTiles(){
     return numTiles;
}

SDL_Surface* TileSet::GetSurface(){
     return set;
}

SDL_Rect TileSet::GetRegion(uint32_t tileNumber){
     if(tileNumber < numTiles)
	  return bound[tileNumber];
     else{
	  SDL_Rect rect={0,0,0,0};
	  return rect;
     }
}

void TileSet::SetRegion(uint32_t tileNumber, SDL_Rect rect){
     if(tileNumber<numTiles)
	  memcpy(&bound[tileNumber],&rect,sizeof(SDL_Rect));
}

int TileSet::Draw(int tileNumber, SDL_Surface* dst, SDL_Rect* dstRect){
     if(bound == NULL)
	  return -1;
     if(set == NULL)
	  return -1;
     SDL_BlitSurface(set, &bound[tileNumber], dst, dstRect);
     return 0;
}

TileSet::~TileSet(){
     if(set!=NULL)
	  SDL_FreeSurface(set);
     if(bound != NULL)
	  delete[] bound;
}
