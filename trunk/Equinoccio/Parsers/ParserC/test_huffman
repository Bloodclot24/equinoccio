#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <wand/MagickWand.h>

#define RADIOCIRCULO 25.0
#define SEPARACION 10.0
#define FUENTE 14

typedef struct miNodo{
     char *nombre;
     int valor;
     struct miNodo* siguiente;
     struct miNodo *derecho, *izquierdo;
     int nivel;
     PointInfo p;
}miNodo;

DrawingWand *wand;
MagickWand* magickWand;
PixelWand* pWand;
int nivel0Counter;
double ancho,alto;
double fontHeight;
double alturaTotal;

PointInfo dibujar(miNodo *n1, miNodo *n2);

int dibujarTodo(miNodo *raiz){

     miNodo *auxiliar;

     if(raiz->derecho == NULL || raiz->izquierdo == NULL)
	  return;

     if(raiz->derecho->nivel == 0 && raiz->izquierdo->nivel == 0){
	  raiz->p=dibujar(raiz->izquierdo, raiz->derecho);
     }
     else{
	  
	  if (raiz->izquierdo != NULL)    
	       dibujarTodo(raiz->izquierdo);
	  if (raiz->derecho != NULL)    
	       dibujarTodo(raiz->derecho);
	  raiz->p=dibujar(raiz->izquierdo, raiz->derecho);

     }

}

PointInfo dibujar(miNodo *n1, miNodo *n2){
     
     if(n1->nivel == n2->nivel){
	  if(n1->nivel==0){
	       double x1,x2;
	       double y1,y2;
	       y1 = alto-RADIOCIRCULO-2;
	       y2 = alto-RADIOCIRCULO-2;
	       x1=nivel0Counter*(4*RADIOCIRCULO+2*SEPARACION)+RADIOCIRCULO+2;
	       x2=2*RADIOCIRCULO+SEPARACION+nivel0Counter*(4*RADIOCIRCULO+2*SEPARACION)+RADIOCIRCULO+2;

	       DrawEllipse(wand, x1, y1, RADIOCIRCULO, RADIOCIRCULO, 0, 360);
	       DrawEllipse(wand, x2, y2, RADIOCIRCULO, RADIOCIRCULO, 0, 360);

	       DrawLine(wand, x1, y1-RADIOCIRCULO, (x1+x2)/2, y1-RADIOCIRCULO*3);
	       DrawLine(wand, x2, y2-RADIOCIRCULO, (x1+x2)/2, y2-RADIOCIRCULO*3);

	       DrawAnnotation(wand, x1, y1+fontHeight/3, n1->nombre);
	       DrawAnnotation(wand, x2, y2+fontHeight/3, n2->nombre);

	       n1->p.x = (x1+x2)/2;
	       alturaTotal = n1->p.y =  y1-RADIOCIRCULO*3;

	       nivel0Counter++;

	  }
	  else{
	       double x1,x2,y1,y2;
	       x1 = n1->p.x;
	       x2 = n2->p.x;
	       y2 = n2->p.y;
	       y1 = n1->p.y;

	       double yFinal, xFinal;
	       if(y1<y2){
		    yFinal = y1-RADIOCIRCULO*3;
	       }
	       else
		    yFinal = y2-RADIOCIRCULO*3;

	       xFinal = (x1+x2)/2;

	       DrawLine(wand, x1, y1, xFinal, yFinal);
	       DrawLine(wand, x2, y2, xFinal, yFinal);

	       n1->p.x = (x1+x2)/2;
	       alturaTotal = n1->p.y =  yFinal;
	  }
     }
     else{

	  double x1,x2,y1,y2;

	  if(n1->nivel==0){
	       n1->p.x = nivel0Counter*(4*RADIOCIRCULO+2*SEPARACION)+RADIOCIRCULO+2;
	       n1->p.y = (double)alto-RADIOCIRCULO-2;
	       DrawEllipse(wand, n1->p.x, n1->p.y, RADIOCIRCULO, RADIOCIRCULO, 0, 360);
	       DrawAnnotation(wand, n1->p.x, n1->p.y+fontHeight/3, n1->nombre);
	       nivel0Counter++;
	  }
	  if(n2->nivel==0){
	       n2->p.x = (double)(nivel0Counter*(4*RADIOCIRCULO+2*SEPARACION)+RADIOCIRCULO+2);
	       n2->p.y = (double)(alto-RADIOCIRCULO-2);
	       DrawEllipse(wand, n2->p.x, n2->p.y, RADIOCIRCULO, RADIOCIRCULO, 0, 360);
	       DrawAnnotation(wand, n2->p.x, n2->p.y+fontHeight/3, n2->nombre);
	       nivel0Counter++;
	  }

	  x1 = n1->p.x; y1=n1->p.y;
	  x2 = n2->p.x; y2=n2->p.y;


	  double yFinal, xFinal;
	  if(y1<y2){
	       yFinal = y1-RADIOCIRCULO*3;
	  }
	  else
	       yFinal = y2-RADIOCIRCULO*3;
	  
	  xFinal = (x1+x2)/2;


	  if(n1->nivel==0)
	       DrawLine(wand, x1, y1-RADIOCIRCULO,xFinal, yFinal);
	  else
	       DrawLine(wand, x1, y1, xFinal, yFinal);

	  if(n2->nivel==0)
	       DrawLine(wand, x2, y2-RADIOCIRCULO, xFinal, yFinal);	  
	  else
	       DrawLine(wand, x2, y2, xFinal, yFinal);

	  
	  n1->p.x = xFinal;
	  alturaTotal = n1->p.y =  yFinal;
	  
	  
     }
     n2->p = n1->p;
     return n1->p;
}

int asociar(miNodo **raiz1){
     miNodo *n1, *n2, *actual, *raiz;
     
     raiz = *raiz1;
     
     actual = raiz;
     
     if(actual != NULL){
	  if(actual->nombre!=NULL)
	       n1 = actual;
	  else return -1;
     }
     else return -1;
     actual = actual->siguiente;

     if(actual != NULL){
	  if(actual->nombre!=NULL)
	       n2 = actual;
	  else return -1;
     }
     else return -1;

     if(n1->valor > n2->valor){
	  miNodo * auxiliar;
	  auxiliar = n2;
	  n2 = n1;
	  n1 = auxiliar;
     }

     actual=actual->siguiente;

     while(actual != NULL){
	  if(actual->nombre != NULL){
	       if(actual->valor < n1->valor){
		    miNodo* auxiliar = n1;
		    n1 = actual;
		    if(auxiliar->valor < n2->valor){
			 n2 = auxiliar;
		    }
	       }
	       else if(actual->valor < n2->valor){
		    n2 = actual;
	       }
	       actual=actual->siguiente;
	  }
	  else{
	       /* si el nombre es NULL, llegamos al final */
	       actual = NULL;
	  }
     }

     //    dibujar(n1,n2);

     actual = raiz;
     miNodo* auxiliar;

     miNodo *nuevo = malloc(sizeof(miNodo));

     nuevo->izquierdo = n1;
     nuevo->derecho = n2;
     nuevo->nombre = n1->nombre;
     nuevo->nivel = 2;
     nuevo->valor = n1->valor+n2->valor;
     nuevo->siguiente = n1->siguiente;

     actual = raiz;

     if(n1==raiz){
	  raiz = *raiz1 = nuevo;
     }
     else{
	  while(actual != n1){
	       auxiliar = actual;
	       actual = actual->siguiente;
	  }
	  auxiliar->siguiente = nuevo;
     }
     actual = raiz;
     if(n2==raiz){
	  raiz = *raiz1 = n2->siguiente;
     }
     else{
	  while(actual != n2){
	       auxiliar = actual;
	       actual = actual->siguiente;
	  }
	  auxiliar->siguiente = n2->siguiente;
     }

     return 1;
}

int main(int argc, char** argv){
     if(argc<4){
	  /* como minimo dos elementos de la forma 'nombre,valor' y el primer parametro es el nombre */
	  return 1;
     }

     int i;
     char *nombre, *nuevoNombre;
     char *valor;

     miNodo *raiz = malloc(sizeof(miNodo));
     miNodo *actual = raiz;

     for(i=2;i<argc;i++){
	  nombre = (char*)strtok(argv[i], ",");
	  nuevoNombre = malloc(strlen(nombre));
	  strcpy(nuevoNombre, nombre);
	  actual->nombre = nuevoNombre;
	  valor = strtok(NULL, "\0");
	  actual->valor = atoi(valor);
	  actual->siguiente = malloc(sizeof(miNodo));
	  actual->nivel = 0;
	  actual->derecho = actual->derecho =NULL;
	  actual = actual->siguiente;
     }
     
     actual->nombre = NULL;

     MagickWandGenesis();
     wand = NewDrawingWand();
     magickWand = NewMagickWand();
     pWand = NewPixelWand();

     PixelSetColor(pWand, "white");

     ancho = 800;
     alto = 600;

     DrawSetViewbox(wand, 0, 0, ancho, alto);


     PixelSetColor(pWand, "rgb(255,255,255)");     
     DrawSetFillColor(wand, pWand);
     DrawSetStrokeWidth(wand, 2);

     PixelSetColor(pWand, "rgb(0,0,0)");     
     DrawSetStrokeColor(wand, pWand);

     DrawSetTextAlignment(wand, CenterAlign);
     DrawSetFontSize(wand, FUENTE);
     fontHeight = FUENTE;
     
     while(asociar(&raiz)==1){

     }

     dibujarTodo(raiz);

     PixelSetColor(pWand, "rgb(255,255,255)");     

     MagickNewImage(magickWand, ancho, alto, pWand);

     MagickDrawImage(magickWand, wand);

     MagickTrimImage(magickWand,0);


     MagickWriteImage(magickWand, argv[1]);

     DestroyDrawingWand(wand);
     DestroyMagickWand(magickWand);
     DestroyPixelWand(pWand);
     MagickWandTerminus();

     
     return 0;
}
